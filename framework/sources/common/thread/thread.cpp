//*****************************************************************************
//
// スレッドクラス
//
// Author		: Kenji Kabutomori
//
//*****************************************************************************

//*****************************************************************************
// インクルード
//*****************************************************************************
#include "thread.h"
#include <process.h>

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************

//*****************************************************************************
// グローバル変数
//*****************************************************************************

//=============================================================================
// コンストラクタ
//=============================================================================
CThread::CThread(void)
{
	m_hThread = NULL;
}

//=============================================================================
// デストラクタ
//=============================================================================
CThread::~CThread(void)
{
}

//=============================================================================
// スレッドの初期化処理
//=============================================================================
bool CThread::Init(void)
{
	return true;
}

//=============================================================================
// 終了処理
//=============================================================================
void CThread::Uninit(void)
{
	Stop();
}

//=============================================================================
// 開始処理
//=============================================================================
bool CThread::Start(void* func,void* arg)
{
	unsigned int nThreadId;

	if(m_hThread == NULL)
	{
		// スレッドの作成
		m_hThread = (HANDLE)_beginthreadex(NULL,0,(unsigned int(__stdcall*)(void*))func,arg,0,&nThreadId);

		// 
		if(m_hThread == 0)
		{
			return false;
		}
	}
	else
	{
		return false;
	}

	return true;
}

//=============================================================================
// 停止処理
//=============================================================================
void CThread::Stop(void)
{
	// NULLチェック
	if(m_hThread != NULL)
	{
		// スレッドの終了可能まで待ち
		WaitForSingleObject(m_hThread,INFINITE);

		// スレッドの終了
		CloseHandle(m_hThread);

		// NULLで初期化
		m_hThread = NULL;
	}
}

//=============================================================================
// 終了確認処理
//=============================================================================
bool CThread::CheckEnd(void)
{
	DWORD ThreadStatus;

	if(m_hThread == NULL)
	{
		return true;
	}

	GetExitCodeThread(m_hThread,&ThreadStatus);

	if(ThreadStatus == STILL_ACTIVE)
	{
		return false;
	}

	return true;

}

//---------------------------------- EOF --------------------------------------
