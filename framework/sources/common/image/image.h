//*****************************************************************************
//
// イメージデータ関連
//
// Author		: Kenji Kabutomori
//
//*****************************************************************************

//*****************************************************************************
/**
*	イメージデータの管理
*
*	イメージデータを扱う自分専用のフォーマット
*
*/
//*****************************************************************************

//*****************************************************************************
// 二重定義防止
//*****************************************************************************
#pragma once

#ifndef _IMAGE_H_
#define _IMAGE_H_

//*****************************************************************************
// インクルード
//*****************************************************************************
#include "common/image/color/color4f.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// 定数定義
//*****************************************************************************

//*****************************************************************************
// 構造体定義
//*****************************************************************************
typedef struct _IMAGE
{
	// 横幅
	u32 _width;

	// 縦幅
	u32 _height;

	// 色情報(RGBA)
	// 0.0fから1.0fで扱う
	COLOR4F* _color;
}IMAGE;

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************

/**
*	左右反転関数
*
*	画像データを左右反転する
*	IMAGE構造体に情報を格納する
*
*	@param	IMAGE* イメージ構造体ポインタ(出力情報格納用)
*	@param	const IMAGE& 元のイメージデータ
*
*	@return	void
*/
void FlipHorizontalImage(IMAGE* out_image,const IMAGE& in_image);

/**
*	上下反転関数
*
*	画像データを上下反転する
*	IMAGE構造体に情報を格納する
*
*	@param	IMAGE* イメージ構造体ポインタ(出力情報格納用)
*	@param	const IMAGE& 元のイメージデータ
*
*	@return	void
*/
void FlipVerticalImage(IMAGE* out_image,const IMAGE& in_image);

/**
*	IMAGEからunsigned charへ変換関数
*
*	IMAGEデータからunsigned char*[]に変換する
*
*	@param	unsigned char*[] 変換後のデータ(出力)
*	@param	const IMAGE& 元のイメージデータ
*
*	@return	void
*/
unsigned char* ConvertCharFromImage(const IMAGE& image);

#endif // _IMAGE_H_

//---------------------------------- EOF --------------------------------------
