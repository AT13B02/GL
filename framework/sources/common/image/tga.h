//*****************************************************************************
//
// tgaファイル関連
//
// Author		: Kenji Kabutomori
//
//*****************************************************************************

//*****************************************************************************
/**
*	TGAファイル処理\n
*	TGAファイルに関する処理\n
*
*
*/
//*****************************************************************************

//*****************************************************************************
// 二重定義防止
//*****************************************************************************
#pragma once

#ifndef _TGA_H_
#define _TGA_H_

//*****************************************************************************
// インクルード
//*****************************************************************************
#include "image.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// 定数定義
//*****************************************************************************

//*****************************************************************************
// 構造体定義
//*****************************************************************************
typedef struct _TGAHEADERFORMAT
{
	// ID
	u8 _id;

	// カラーマップタイプ
	// 0x00 : 無
	// 0x01 : 有
	u8 _color_map_type;

	// イメージタイプ
	// 0x00 : 無し
	// 0x01 : インデックスカラー
	// 0x02 : フルカラー
	// 0x03 : gray
	// 0x09 : インデックスカラー(RLE)
	// 0x0A : フルカラー(RLE)
	// 0x0B : gray(RLE)
	u8 _image_type;

	// カラーマップインデックス
	// Low,Highの順番
	u16 _color_map_index;

	// カラーマップレングス
	// Low,Highの順番
	u16 _color_map_length;

	// カラーマップサイズ
	u8 _color_map_size;

	// よくわからん(´・ω・｀)
	u16 _image_orign_x;

	// よくわからん(´・ω・｀)
	u16 _image_orign_y;

	// 画像の横幅
	u16 _image_width;

	// 画像の縦幅
	u16 _image_height;

	// 1ピクセルのサイズ
	u8 _bit_per_pixel;

	// 各種フラグみたいなもの
	// 0から3bit : attribute,よくわからん(´・ω・｀)
	// 4bit      : 0 : 左→右,1 : 右→左
	// 5bit      : 0 : 下→上,1 : 上→下
	// 6から7bit : よくわからん(´・ω・｀)
	u8 _discnpter;

}TGAHEADERFORMAT;

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************
/**
*	TGAファイル読み込み関数
*
*	TGAファイルの読み込み
*	IMAGE構造体に情報を格納する
*
*	@param	const char* ファイル名
*	@param	IMAGE* イメージ構造体ポインタ(出力情報格納用)
*	@param	bool 変換フラグ
*
*	@return	bool 成功判定(成功 : true / 失敗 : false)
*/
bool LoadTGATexture(const s8* filename,IMAGE* out_image,bool convert_flag);

#endif // _TGA_H_

//---------------------------------- EOF --------------------------------------
