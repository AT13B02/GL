//*****************************************************************************
//
// 2次元ベクトルクラス
//
// Author		: Kenji Kabutomori
//
//*****************************************************************************

//*****************************************************************************
// インクルード
//*****************************************************************************
#include "common/math/math.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************

//*****************************************************************************
// グローバル変数
//*****************************************************************************

//=============================================================================
// 単位ベクトルの取得
//=============================================================================
void VECTOR2::Normalize(void)
{
	float fMagnitude;

	fMagnitude = Magnitude();

	if(fMagnitude != 0.0f)
	{
		_x /= fMagnitude;
		_y /= fMagnitude;
	}
}

//=============================================================================
// ベクトルの大きさの取得
//=============================================================================
float VECTOR2::Magnitude(void) const
{
	return sqrtf(_x * _x + _y * _y);
}

//=============================================================================
// 内積計算
//=============================================================================
float VECTOR2::DotProduct(const VECTOR2& vector) const
{
	return _x * vector._x + _y * vector._y;
}

//=============================================================================
// 外積計算
//=============================================================================
float VECTOR2::CrossProduct(const VECTOR2& vector) const
{
	return _x * vector._y - _y * vector._x;
}

//=============================================================================
// スカラーとの足算
//=============================================================================
VECTOR2 VECTOR2::operator+(const float& value)
{
	return VECTOR2(_x + value,_y + value);
}

//=============================================================================
// スカラーとの引算
//=============================================================================
VECTOR2 VECTOR2::operator-(const float& value)
{
	return VECTOR2(_x - value,_y - value);
}

//=============================================================================
// スカラーとの掛算
//=============================================================================
VECTOR2 VECTOR2::operator*(const float& value)
{
	return VECTOR2(_x * value,_y * value);
}

//=============================================================================
// スカラーとの割算
//=============================================================================
VECTOR2 VECTOR2::operator/(const float& value)
{
	if(value != 0)
	{
		float inv = 1 / value;
		return VECTOR2(_x * inv,_y * inv);
	}

	return *this;
}

//=============================================================================
// スカラーとの足算
//=============================================================================
VECTOR2& VECTOR2::operator+=(const float& value)
{
	_x += value;
	_y += value;

	return *this;
}

//=============================================================================
// スカラーとの引算
//=============================================================================
VECTOR2& VECTOR2::operator-=(const float& value)
{
	_x -= value;
	_y -= value;

	return *this;
}

//=============================================================================
// スカラーとの掛算
//=============================================================================
VECTOR2& VECTOR2::operator*=(const float& value)
{
	_x *= value;
	_y *= value;

	return *this;
}

//=============================================================================
// スカラーとの割算
//=============================================================================
VECTOR2& VECTOR2::operator/=(const float& value)
{
	float fInv;

	if(value != 0)
	{
		fInv = 1 / value;

		_x *= fInv;
		_y *= fInv;
	}

	return *this;
}

//=============================================================================
// ベクトルとの足算
//=============================================================================
VECTOR2 VECTOR2::operator+(const VECTOR2& vector) const
{
	return VECTOR2(_x + vector._x,_y + vector._y);
}

//=============================================================================
// ベクトルとの引算
//=============================================================================
VECTOR2 VECTOR2::operator-(const VECTOR2& vector) const
{
	return VECTOR2(_x - vector._x,_y - vector._y);
}

//=============================================================================
// ベクトルとの足算
//=============================================================================
VECTOR2& VECTOR2::operator+=(const VECTOR2& vector)
{
	_x += vector._x;
	_y += vector._y;

	return *this;
}

//=============================================================================
// ベクトルとの引算
//=============================================================================
VECTOR2& VECTOR2::operator-=(const VECTOR2& vector)
{
	_x -= vector._x;
	_y -= vector._y;

	return *this;
}

//-----------------------------------EOF---------------------------------------
