//*****************************************************************************
//
// 4次元ベクトルクラス
//
// Author		: Kenji Kabutomori
//
//*****************************************************************************

//*****************************************************************************
// インクルード
//*****************************************************************************
#include "common/math/math.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************

//*****************************************************************************
// グローバル変数
//*****************************************************************************

//=============================================================================
// 単位ベクトル化
//=============================================================================
const VECTOR4& VECTOR4::Normalize(void)
{
	f32 magnitude = Magnitude();

	// 0除算の確認
	if (magnitude != 0.0f)
	{
		_x /= magnitude;
		_y /= magnitude;
		_z /= magnitude;
		_w /= magnitude;
	}
	return *this;
}

//=============================================================================
// ベクトルの大きさを取得
//=============================================================================
f32 VECTOR4::Magnitude(void) const
{
	return sqrtf(_x * _x + _y * _y + _z * _z + _w * _w);
}

//=============================================================================
// スカラーとの足算
//=============================================================================
VECTOR4 VECTOR4::operator+(const f32& value) const
{
	return VECTOR4(_x + value,_y + value,_z + value,_w + value);
}

//=============================================================================
// スカラーとの引算
//=============================================================================
VECTOR4 VECTOR4::operator-(const f32& value) const
{
	return VECTOR4(_x - value,_y - value,_z - value,_w - value);
}

//=============================================================================
// スカラーとの掛算
//=============================================================================
VECTOR4 VECTOR4::operator*(const f32& value) const
{
	return VECTOR4(_x * value,_y * value,_z * value,_w * value);
}

//=============================================================================
// スカラーとの割算
//=============================================================================
VECTOR4 VECTOR4::operator/(const f32& value) const
{
	if(value != 0.0f)
	{
		const f32 inv = 1 / value;
		return VECTOR4(_x * inv,_y * inv,_z * inv,_w * inv);
	}

	return *this;
}

//=============================================================================
// スカラーとの足算
//=============================================================================
VECTOR4& VECTOR4::operator+=(const f32& value)
{
	_x += value;
	_y += value;
	_z += value;
	_w += value;

	return *this;
}

//=============================================================================
// スカラーとの引算
//=============================================================================
VECTOR4& VECTOR4::operator-=(const f32& value)
{
	_x -= value;
	_y -= value;
	_z -= value;
	_w -= value;

	return *this;
}

//=============================================================================
// スカラーとの掛算
//=============================================================================
VECTOR4& VECTOR4::operator*=(const f32& value)
{
	_x *= value;
	_y *= value;
	_z *= value;
	_w *= value;

	return *this;
}

//=============================================================================
// スカラーとの割算
//=============================================================================
VECTOR4& VECTOR4::operator/=(const f32& value)
{
	if(value != 0)
	{
		const f32 inv = 1 / value;

		_x *= inv;
		_y *= inv;
		_z *= inv;
		_w *= inv;
	}

	return *this;
}

//=============================================================================
// ベクトルとの足算
//=============================================================================
VECTOR4 VECTOR4::operator+(const VECTOR4& vector) const
{
	return VECTOR4(_x + vector._x,_y + vector._y,_z + vector._z,_w + vector._w);
}

//=============================================================================
// ベクトルとの引算
//=============================================================================
VECTOR4 VECTOR4::operator-(const VECTOR4& vector) const
{
	return VECTOR4(_x - vector._x,_y - vector._y,_z - vector._z,_w - vector._w);
}

//=============================================================================
// ベクトルとの足算
//=============================================================================
VECTOR4& VECTOR4::operator+=(const VECTOR4& vector)
{
	_x += vector._x;
	_y += vector._y;
	_z += vector._z;
	_w += vector._w;

	return *this;
}

//=============================================================================
// ベクトルとの掛算
//=============================================================================
VECTOR4& VECTOR4::operator-=(const VECTOR4& vector)
{
	_x -= vector._x;
	_y -= vector._y;
	_z -= vector._z;
	_w -= vector._w;

	return *this;
}

//-----------------------------------EOF---------------------------------------
