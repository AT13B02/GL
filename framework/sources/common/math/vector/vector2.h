//*****************************************************************************
//
// 2次元ベクトルクラス
//
// Author		: Kenji Kabutomori
//
//*****************************************************************************

//*****************************************************************************
/**
*
*	2次元ベクトルクラス
*
*	2次元ベクトルで使う処理もここに書く
*
*/
//*****************************************************************************

//*****************************************************************************
// 二重定義防止
//*****************************************************************************
#pragma once

#ifndef _VECTOR2_H_
#define _VECTOR2_H_

//*****************************************************************************
// インクルード
//*****************************************************************************

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// 定数定義
//*****************************************************************************

//*****************************************************************************
// 構造体定義
//*****************************************************************************
typedef struct VECTOR2
{
public:
	f32 _x;
	f32 _y;

	//-----------------------------------------------------
	// コンストラクタ

	/**
	*	デフォルトコンストラクタ
	*
	*	0.0fで初期化
	*
	*	@param	void
	*/
	VECTOR2(void){_x = 0.0f;_y = 0.0f;}

	/**
	*	コンストラクタ
	*
	*	要素を指定して初期化
	*
	*	@param	f32 x
	*	@param	f32 y
	*	@param	f32 z
	*/
	VECTOR2(const f32& x,const f32& y){_x = x;_y = y;}

	/**
	*	コピーコンストラクタ
	*
	*	要素をコピーして初期化
	*
	*	@param	VECTOR2
	*/
	VECTOR2(const VECTOR2& vector){_x = vector._x;_y = vector._y;}

	/**
	* 単位ベクトル化
	*
	* ベクトルを単位ベクトルにする
	*
	* @param  void
	* @return void
	*/
	const VECTOR2& Normalize(void);

	/**
	* ベクトルの大きさの取得
	*
	* ベクトルの大きさを取得する
	*
	* @param  void
	* @return f32 ベクトルの大きさ
	*/
	f32 Magnitude(void) const;

	/**
	* ベクトルの内積
	*
	* ベクトルの内積計算を行う
	* 演算結果は返り値
	*
	* @param  VECTOR2 ベクトル
	* @return f32 内積結果
	*/
	f32 DotProduct(const VECTOR2& vector) const;

	/**
	* ベクトルの外積
	*
	* ベクトルの外積計算を行う
	* 演算結果は返り値
	*
	* @param  VECTOR2 ベクトル
	* @return f32 外積結果
	*/
	f32 CrossProduct(const VECTOR2& vector) const;

	//-----------------------------------------------------
	// 符号変換

	VECTOR2 operator+(void){return *this;}
	VECTOR2 operator-(void){return VECTOR2(-_x,-_y);}

	//-----------------------------------------------------
	// スカラー

	VECTOR2 operator+(const f32& value);
	VECTOR2 operator-(const f32& value);
	VECTOR2 operator*(const f32& value);
	VECTOR2 operator/(const f32& value);

	VECTOR2& operator+=(const f32& value);
	VECTOR2& operator-=(const f32& value);
	VECTOR2& operator*=(const f32& value);
	VECTOR2& operator/=(const f32& value);

	//-----------------------------------------------------
	// ベクトル

	VECTOR2 operator+(const VECTOR2& vector) const;
	VECTOR2 operator-(const VECTOR2& vector) const;

	VECTOR2& operator+=(const VECTOR2& vector);
	VECTOR2& operator-=(const VECTOR2& vector);

}VECTOR2;

#endif // _VECTOR2_H_

//---------------------------------- EOF --------------------------------------
