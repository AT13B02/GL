//*****************************************************************************
//
// 数学計算処理
//
// Author		: Kenji Kabutomori
//
//*****************************************************************************

//*****************************************************************************
// インクルード
//*****************************************************************************
#include "math.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************

//*****************************************************************************
// グローバル変数
//*****************************************************************************

//=============================================================================
// 2次元ベクトルの2点間の距離を取得
//=============================================================================
f32 GetVector2Length(const VECTOR2& vector1,const VECTOR2& vector2)
{
	f32 length = 0.0f;
	VECTOR2 work;

	work = vector2 - vector1;

	length = work.Magnitude();

	return length;
}

//=============================================================================
// 3次元ベクトルの2点間の距離を取得
//=============================================================================
f32 GetVector3Length(const VECTOR3& vector1,const VECTOR3& vector2)
{
	f32 length = 0.0f;
	VECTOR3 work;

	work = vector2 - vector1;

	length = work.Magnitude();

	return length;
}

//=============================================================================
// 行列変換後の座標の取得
//=============================================================================
VECTOR3 GetTransformCoord(const VECTOR3& vector,const MATRIX4x4& matrix)
{
	MATRIX4x4 translate;
	VECTOR3 transform;

	translate.SetTlanslation(vector._x,vector._y,vector._z);

	translate *= matrix;

	return transform;
}

//=============================================================================
// 行列変換後の座標の取得
//=============================================================================
VECTOR3 GetTransform(const VECTOR4& Vector,const MATRIX4x4& matrix)
{
	return VECTOR3();
}

//=============================================================================
// 角度の正規化の取得
//=============================================================================
f32 GetRotationNormalize(const f32& rotation_degree)
{
	f32 rotation = rotation_degree;

	if(rotation_degree > 180.0f)
	{
		rotation = -180.0f + (rotation - 180.0f);
	}

	if(rotation_degree <= -180.0f)
	{
		rotation = 180.0f + (rotation + 180.0f);
	}

	/*
		// 180度を超えた時
	if(*pRot > D3DX_PI)
	{
		*pRot = -D3DX_PI + (*pRot - D3DX_PI);
	}
	// -180度を超えた時
	else if(*pRot < -D3DX_PI)
	{
		*pRot = D3DX_PI + (*pRot + D3DX_PI);
	}
	// 正常な値の時
	else
	{
		return;
	}
	// 正常な状態に戻っているかチェック
	RotNormalization(pRot);
	*/
	return rotation;
}

//-----------------------------------EOF---------------------------------------
