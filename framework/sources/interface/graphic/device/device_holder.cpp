//*****************************************************************************
//
// デバイスホルダークラス
//
// Author		: Kenji Kabutomori
//
//*****************************************************************************

//*****************************************************************************
// インクルード
//*****************************************************************************
#include <stdio.h>

// basic
#include "basic/application.h"

// graphic
#include "interface/graphic/device/device_holder.h"
#ifdef _USING_DIRECTX_
#include "interface/graphic/device/directx/directx.h"
#endif // _USING_DIRECTX_
#ifdef _USING_OPENGL_
#include "interface/graphic/device/opengl/opengl.h"
#endif // _USING_OPENGL_

// common
#include "common/common.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// 構造体定義
//*****************************************************************************

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************

//*****************************************************************************
// グローバル変数
//*****************************************************************************

//=============================================================================
// コンストラクタ
//=============================================================================
CDeviceHolder::CDeviceHolder(WINDOW_DATA* window_data)
{
	window_data_ = window_data;

#ifdef _USING_DIRECTX_
	device_ = new CDirectx(window_data);
#endif // _USING_DIRECTX_

#ifdef _USING_OPENGL_
	device_ = new COpengl(window_data);
#endif // _USING_OPENGL_
}

//=============================================================================
// デストラクタ
//=============================================================================
CDeviceHolder::~CDeviceHolder(void)
{
}

//=============================================================================
// 初期化
//=============================================================================
bool CDeviceHolder::Init(void)
{
	device_->Init();

	return true;
}

//=============================================================================
// 終了
//=============================================================================
void CDeviceHolder::Uninit(void)
{
	SAFE_RELEASE(device_);
}

//=============================================================================
// 描画開始
//=============================================================================
void CDeviceHolder::BeginDraw(void)
{
	device_->BeginDraw();
}

//=============================================================================
// 描画終了
//=============================================================================
void CDeviceHolder::EndDraw(void)
{
	device_->EndDraw();
}

//=============================================================================
// 描画開始
//=============================================================================
void CDeviceHolder::BeginLoad(void)
{
	device_->BeginLoad();
}

//=============================================================================
// 描画終了
//=============================================================================
void CDeviceHolder::EndLoad(void)
{
	device_->EndLoad();
}

//=============================================================================
// スクリーンショット
//=============================================================================
void CDeviceHolder::ScreenShot(void)
{
	s8 filename[256] = {NULL};

	// スクリーンショット名を時間で決める
	sprintf(filename,"screenshot/%d.bmp",timeGetTime());

	// スクリーンショット
	ScreenShot(filename);
}

//=============================================================================
// スクリーンショット
//=============================================================================
void CDeviceHolder::ScreenShot(const s8* filename)
{
	// スクリーンショット
	device_->ScreenShot(filename);
}

//=============================================================================
// リセットデバイス
//=============================================================================
void CDeviceHolder::ResetDevice(void)
{
}

//=============================================================================
// 描画モードを設定
//=============================================================================
void CDeviceHolder::SetDrawMode(const CGraphicDevice::DEVICE_MODE& device_mode)
{
	device_->set_draw_mode(device_mode);
}

//=============================================================================
// ロードモードを設定
//=============================================================================
void CDeviceHolder::SetLoadMode(const CGraphicDevice::DEVICE_MODE& device_mode)
{
	device_->set_load_mode(device_mode);
}

//=============================================================================
// クローンの生成
//=============================================================================
//CDeviceHolder* CDeviceHolder::MakeClone(void)
//{
//	CDeviceHolder* graphic_device = new CDeviceHolder();
//
//	// ウィンドウデータのコピー
//	graphic_device->window_data_ = window_data_;
//
//	// クローンの生成
//	graphic_device->device_ = device_->MakeClone();
//
//	return graphic_device;
//}

//---------------------------------- EOF --------------------------------------
