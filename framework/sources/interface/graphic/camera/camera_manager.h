//*****************************************************************************
//
// カメラマネージャークラス
//
// Author		: Kenji Kabutomori
//
//*****************************************************************************

//*****************************************************************************
// 多重定義防止
//*****************************************************************************
#pragma once

#ifndef _CAMERA_MANAGER_H_
#define _CAMERA_MANAGER_H_

//*****************************************************************************
// インクルード
//*****************************************************************************
#include <map>
#include "basic/basic.h"
#include "common/math/math.h"

//*****************************************************************************
// 定数定義
//*****************************************************************************

//*****************************************************************************
// 構造体定義
//*****************************************************************************

//*****************************************************************************
// クラスの前方参照
//*****************************************************************************
class CCamera;
class CDeviceHolder;

//*****************************************************************************
// クラス定義
//*****************************************************************************
class CCameraManager : public CBasic
{
public:
	// コンストラクタ
	CCameraManager(CDeviceHolder* device_holder);

	// デストラクタ
	~CCameraManager(void);

	// 初期化処理
	bool Init(void);

	// 更新処理
	void Update(void);

	// 終了処理
	void Uninit(void);

	// カメラの設定処理
	CCamera* SetCamera(const u32& idx);

	// カメラの取得
	CCamera* GetCamera(const u32& key);

	// カメラの作成
	u32 CreateCamera(void);

	// カメラの削除
	bool EraseCamera(const u32& key);

	// カメラの個数を取得
	u32 number_count(void){return number_count_;}
protected:

private:
	CDeviceHolder* device_holder_;

	// カメラ
	std::map<u32,CCamera*> camera_;

	u32 number_count_;

	// キーの発行
	u32 CreateKey(void);
};

#endif	// _CAMERA_MANAGER_H_

//---------------------------------- EOF --------------------------------------
