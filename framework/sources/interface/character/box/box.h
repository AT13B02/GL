//*****************************************************************************
//
// 箱クラス
//
// Author		: Ryo Kobayashi
//
//*****************************************************************************


//*****************************************************************************
// 多重定義防止
//*****************************************************************************
#pragma once

#ifndef _BOX_H_
#define _BOX_H_

//*****************************************************************************
// warning消し
//*****************************************************************************

//*****************************************************************************
// インクルード
//*****************************************************************************
// basic
#include "basic/basic.h"
#include "common/math/vector/vector3.h"

// character
#include "box_manager.h"
#include "interface/character/character_interface.h"

// general
#include "general/aabb/axis_aligned_bounding_box.h"

//*****************************************************************************
// ライブラリのリンク
//*****************************************************************************

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// 構造体定義
//*****************************************************************************

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************

//*****************************************************************************
// クラス定義
//*****************************************************************************
class CBox : public CCharacterInterface
{
public:
	// コンストラクタ
	CBox(CInterfaceManager* interface_manager);

	// デストラクタ
	~CBox(void);

	// 初期化処理
	bool Init(void);

	// 更新処理
	void Update(void);

	// 終了処理
	void Uninit(void);

	//描画
	void Draw(void);

	// 座標設定
	void position(const VECTOR3& position);
	void position(const f32 x, const f32 y, const f32 z);
	// 座標取得
	const VECTOR3& position();

	// 当たり判定取得
	const AABB& collision();

protected:
	

private:
	//インターフェースマネージャー
	CInterfaceManager* interface_manager_;

	//オブジェクトキー
	u32 object_key_;

	// 当たり判定
	AABB collision_;

	// 座標
	VECTOR3 position_;
	// 回転量
	VECTOR3 rotation_;
	// 拡縮量
	VECTOR3 scale_;
};

//---------------------------------- EOF --------------------------------------

#endif // _BOX_H_