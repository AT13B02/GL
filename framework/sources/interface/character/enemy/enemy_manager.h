//*****************************************************************************
//
// エネミーマネージャークラス [enemy_manager.h]
//
// Author		: KENJI KABUTOMORI
// Date			: 2014/04/21(Mon)
// Version		: 1.00
// Update Date	: 2014/05/14(Wed)
//
//*****************************************************************************

//*****************************************************************************
// 多重定義防止
//*****************************************************************************
#pragma once

#ifndef _ENEMY_MANAGER_H_
#define _ENEMY_MANAGER_H_

//*****************************************************************************
// インクルード
//*****************************************************************************
#include "enemy.h"

//*****************************************************************************
// ライブラリのリンク
//*****************************************************************************

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// 構造体定義
//*****************************************************************************

//*****************************************************************************
// クラスの前方参照
//*****************************************************************************
class CObjectManager;
template <class T> class CList;

//*****************************************************************************
// クラス定義
//*****************************************************************************
class CEnemyManager
{
public:
	// コンストラクタ
	CEnemyManager(CObjectManager* pObjectManager);

	// デストラクタ
	virtual ~CEnemyManager(void);

	// 初期化処理
	bool Init(void);

	// 更新処理
	void Update(void);

	// 開放するものを確認
	void KillRaiseDeathFlag(void);

	// 描画処理
	void Draw(void);

	// 開放処理
	void Release(void){delete this;}

	// エネミーの作成
	CEnemy* CreateEnemy(CEnemy::ENEMY_TYPE EnemyType,bool bListFlag = true);
protected:

private:
	CObjectManager* m_pObjectManager;
	int* m_aObjectNumber[CEnemy::ENEMY_TYPE_MAX];

	CList<CEnemy*>* m_pEnemyList;

};

#endif	// _ENEMY_MANAGER_H_

//---------------------------------- EOF --------------------------------------
