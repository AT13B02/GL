//*****************************************************************************
//
// キャラクターマネージャーインターフェースクラス
//
// Author		: Kenji Kabutomori
//
//*****************************************************************************

//*****************************************************************************
// 多重定義防止
//*****************************************************************************
#pragma once

#ifndef _CHARACTER_MANAGER_INTERFACE_H_
#define _CHARACTER_MANAGER_INTERFACE_H_

//*****************************************************************************
// warning消し
//*****************************************************************************

//*****************************************************************************
// インクルード
//*****************************************************************************
#include <list>

// basic
#include "basic/basic.h"

//*****************************************************************************
// ライブラリのリンク
//*****************************************************************************

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// 構造体定義
//*****************************************************************************

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************

//*****************************************************************************
// クラスの前方参照
//*****************************************************************************
class CInterfaceManager;

//*****************************************************************************
// クラス定義
//*****************************************************************************
template <class T> class CCharacterManagerInterface : public CBasic
{
public:
	// コンストラクタ
	CCharacterManagerInterface(void);

	// デストラクタ
	virtual ~CCharacterManagerInterface(void);

	// 初期化処理
	virtual bool Init(void) = 0;

	// 更新処理
	virtual void Update(void);
	
	// 描画処理
	virtual void Draw(void);

	// 終了処理
	virtual void Uninit(void);

	// キャラクターの追加
	void Push(T character);

	// キャラクターリストの取得
	const std::list<T>& character_list(void){return character_list_;}

protected:
	std::list<T> character_list_;

private:

};

//=============================================================================
// コンストラクタ
//=============================================================================
template <class T> CCharacterManagerInterface<T>::CCharacterManagerInterface(void)
{
}

//=============================================================================
// デストラクタ
//=============================================================================
template <class T> CCharacterManagerInterface<T>::~CCharacterManagerInterface(void)
{
}

//=============================================================================
// 更新処理
//=============================================================================
template <class T> void CCharacterManagerInterface<T>::Update(void)
{
	for(auto it = character_list_.begin();it != character_list_.end();++it)
	{
		(*it)->Update();
	}
}

//=============================================================================
// 描画処理
//=============================================================================
template <class T> void CCharacterManagerInterface<T>::Draw(void)
{
	for(auto it = character_list_.begin();it != character_list_.end();++it)
	{
		(*it)->Draw();
	}
}

//=============================================================================
// 終了処理
//=============================================================================
template <class T> void CCharacterManagerInterface<T>::Uninit(void)
{
	for(auto it = character_list_.begin();it != character_list_.end();++it)
	{
		(*it)->Release();
	}

	character_list_.clear();
}

//=============================================================================
// 追加処理
//=============================================================================
template <class T> void CCharacterManagerInterface<T>::Push(T character)
{
	character_list_.push_back(character);
}

#endif	// _CHARACTER_MANAGER_INTERFACE_H_

//---------------------------------- EOF --------------------------------------
